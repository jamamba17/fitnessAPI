{
  "appName": "Fitness Tracker API",
  "version": "1.0.0",
  "description": "API for logging and tracking personal workouts.",
  "baseURL": "",
  "authentication": {
    "type": "JWT",
    "header": "x-auth-token"
  },
  "endpoints": {
    "login": "/login",
    "register": "/register",
    "addWorkout": "/addWorkout",
    "getMyWorkouts": "/getMyWorkouts",
    "updateWorkout": "/updateWorkout",
    "deleteWorkout": "/deleteWorkout",
    "completeWorkoutStatus": "/completeWorkoutStatus"
  },
  "routes": [
    {
      "path": "/register",
      "method": "POST",
      "description": "Register a new user.",
      "access": "Public",
      "requestBody": {
        "required": ["email", "password"],
        "schema": {
          "email": "String (unique)",
          "password": "String (min 6 characters)"
        }
      },
      "responseBody": {
        "onSuccess": {
          "status": 201,
          "schema": { "token": "String (JWT)" }
        },
        "onError": [
          { "status": 400, "description": "User already exists / Validation error" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    },
    {
      "path": "/login",
      "method": "POST",
      "description": "Authenticate a user and receive a JWT.",
      "access": "Public",
      "requestBody": {
        "required": ["email", "password"],
        "schema": {
          "email": "String",
          "password": "String"
        }
      },
      "responseBody": {
        "onSuccess": {
          "status": 200,
          "schema": { "token": "String (JWT)" }
        },
        "onError": [
          { "status": 400, "description": "Invalid Credentials" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    },
    {
      "path": "/addWorkout",
      "method": "POST",
      "description": "Log a new workout for the authenticated user.",
      "access": "Private (Requires JWT)",
      "requestHeaders": ["x-auth-token"],
      "requestBody": {
        "required": ["name", "duration"],
        "optional": ["status"],
        "schema": {
          "name": "String",
          "duration": "Number (minutes, min: 1)",
          "status": "String (Enum: 'completed', 'planned', 'skipped')"
        }
      },
      "responseBody": {
        "onSuccess": {
          "status": 201,
          "schema": {
            "_id": "String (Workout ID)",
            "user": "String (User ID)",
            "name": "String",
            "duration": "Number",
            "dateAdded": "Date",
            "status": "String"
          }
        },
        "onError": [
          { "status": 400, "description": "Validation error" },
          { "status": 401, "description": "Unauthorized" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    },
    {
      "path": "/getMyWorkouts",
      "method": "GET",
      "description": "Retrieve all workouts for the authenticated user.",
      "access": "Private (Requires JWT)",
      "requestHeaders": ["x-auth-token"],
      "responseBody": {
        "onSuccess": {
          "status": 200,
          "schema": {
            "success": "Boolean",
            "count": "Number",
            "data": "[Workout Object]"
          }
        },
        "onError": [
          { "status": 401, "description": "Unauthorized" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    },
    {
      "path": "/updateWorkout",
      "method": "PUT",
      "description": "Update a specific workout belonging to the authenticated user.",
      "access": "Private (Requires JWT)",
      "requestHeaders": ["x-auth-token"],
      "requestBody": {
        "required": ["id"],
        "optional": ["name", "duration", "status"],
        "schema": {
          "id": "String (Workout ID)",
          "name": "String",
          "duration": "Number (minutes, min: 1)",
          "status": "String (Enum: 'completed', 'planned', 'skipped')"
        }
      },
      "responseBody": {
        "onSuccess": {
          "status": 200,
          "schema": {
            "success": "Boolean",
            "data": "Updated Workout Object"
          }
        },
        "onError": [
          { "status": 400, "description": "Missing workout ID" },
          { "status": 401, "description": "Unauthorized (Token invalid or workout does not belong to user)" },
          { "status": 404, "description": "Workout not found" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    },
    {
      "path": "/deleteWorkout",
      "method": "DELETE",
      "description": "Delete a specific workout belonging to the authenticated user.",
      "access": "Private (Requires JWT)",
      "requestHeaders": ["x-auth-token"],
      "requestBody": {
        "required": ["id"],
        "schema": {
          "id": "String (Workout ID)"
        }
      },
      "responseBody": {
        "onSuccess": {
          "status": 200,
          "schema": {
            "success": "Boolean",
            "msg": "String (Workout removed)"
          }
        },
        "onError": [
          { "status": 400, "description": "Missing workout ID" },
          { "status": 401, "description": "Unauthorized (Token invalid or workout does not belong to user)" },
          { "status": 404, "description": "Workout not found" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    },
    {
      "path": "/completeWorkoutStatus",
      "method": "PUT",
      "description": "Mark a workout as completed for the authenticated user.",
      "access": "Private (Requires JWT)",
      "requestHeaders": ["x-auth-token"],
      "requestBody": {
        "required": ["id"],
        "schema": {
          "id": "String (Workout ID)"
        }
      },
      "responseBody": {
        "onSuccess": {
          "status": 200,
          "schema": {
            "success": "Boolean",
            "data": "Updated Workout Object with status set to 'completed'"
          }
        },
        "onError": [
          { "status": 400, "description": "Missing workout ID" },
          { "status": 401, "description": "Unauthorized (Token invalid or workout does not belong to user)" },
          { "status": 404, "description": "Workout not found" },
          { "status": 500, "description": "Server Error" }
        ]
      }
    }
  ]
}
